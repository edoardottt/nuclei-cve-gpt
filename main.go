/*

Generate Nuclei templates for CVEs using chatGPT.

https://github.com/edoardottt/nuclei-cve-gpt

*/

package main

import (
	"context"
	"errors"
	"fmt"
	"io"
	"log"
	"os"

	openai "github.com/sashabaranov/go-openai"
)

func main() {
	if len(os.Args) < 2 {
		log.Fatalf("usage: %s CVE-id", os.Args[0])
	}

	cve := os.Args[1]
	key := os.Getenv("OPENAI_KEY")

	if key == "" {
		log.Fatal("set OPENAI_KEY environment variable")
	}

	c := openai.NewClient(key)
	ctx := context.Background()

	req := openai.ChatCompletionRequest{
		Model:     openai.GPT3Dot5Turbo,
		MaxTokens: 20,
		Messages: []openai.ChatCompletionMessage{
			{
				Role:    openai.ChatMessageRoleUser,
				Content: "Generate a working Nuclei template for the CVE " + cve,
			},
		},
		Stream: true,
	}

	stream, err := c.CreateChatCompletionStream(ctx, req)
	if err != nil {
		stream.Close()
		log.Fatalf("ChatCompletionStream error: %v\n", err)
	}

	defer stream.Close()

	fmt.Printf("Stream response: ")

	for {
		response, err := stream.Recv()
		if errors.Is(err, io.EOF) {
			fmt.Println("\nStream finished")
			return
		}

		if err != nil {
			log.Fatalf("\nStream error: %v\n", err)
		}

		fmt.Printf(response.Choices[0].Delta.Content)
	}
}
